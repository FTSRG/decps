package hu.bme.mit.inf.cps.patterns

import "http://cps/1.0"

pattern createApplicationInstance(req : Requirement) {
	find unsatisfiedRequirement(req);
}

pattern unsatisfiedRequirement(req : Requirement) {
	M == count find applicationsInRequirement(req, _);
	Requirement.^count(req, N);
	M != N;
}

private pattern applicationsInRequirement(req : Requirement, app : ApplicationInstance) {
	Requirement.instances(req, app);
}

pattern allocate(appInstance : ApplicationInstance, hostInstance : HostInstance, req : ResourceRequirement) {
	neg find allocatedTo(appInstance, _);
//	neg find allocatedToHostType(appInstance, req);
	find canAllocateTo(appInstance, hostInstance, req);
}

pattern deleteAllocation(appInstance : ApplicationInstance, hostInstance : HostInstance, req : ResourceRequirement) {
	find allocatedTo(appInstance, hostInstance);
	ApplicationInstance.type.requirements(appInstance, req);
	ResourceRequirement.hostType.instances(req, hostInstance);
	ApplicationInstance.state(appInstance, ::Stopped);
}

pattern startInstance(appInstance : ApplicationInstance) {
	find allocatedTo(appInstance, _);
	ApplicationInstance.state(appInstance, ::Stopped);
}

pattern stopInstance(appInstance : ApplicationInstance) {
	ApplicationInstance.state(appInstance, ::Running);
}

pattern move(appInstance : ApplicationInstance, from : HostInstance, to : HostInstance, req : ResourceRequirement) {
	find allocatedTo(appInstance, from);
	ApplicationInstance.type.requirements(appInstance, req);
	ResourceRequirement.hostType(req, hostType);
	HostInstance.type(to, hostType);
	from != to;
	
	ApplicationInstance.state(appInstance, ::Stopped);

	find canAllocateTo(appInstance, to, req);
}

private pattern allocatedTo(appInstance : ApplicationInstance, hostInstance : HostInstance) {
	ApplicationInstance.allocatedTo(appInstance, hostInstance);
}

private pattern allocatedToHostType(appInstance : ApplicationInstance, req : ResourceRequirement){
	find allocatedTo(appInstance, host);
	HostInstance.type(host, hostType);
	ApplicationInstance.type.requirements(appInstance, req);
	ResourceRequirement.hostType(req, hostType);
}

pattern canAllocateTo(appInstance : ApplicationInstance, hostInstance : HostInstance, req : ResourceRequirement) {
	ApplicationInstance.type.requirements(appInstance, req);
	ResourceRequirement.hostType(req, hostType);
	HostInstance.type(hostInstance, hostType);
	
	HostInstance.availableMemory(hostInstance, currMemorySize);
	ResourceRequirement.requiredMemory(req, reqMemorySize);
	check(currMemorySize >= reqMemorySize);

	HostInstance.availableHdd(hostInstance, currHdd);
	ResourceRequirement.requiredHdd(req, reqHdd);
	check(currHdd >= reqHdd);

	HostInstance.availableCpu(hostInstance, currCpu);
	ResourceRequirement.requiredCpu(req, reqCpu);
	check(currCpu >= reqCpu);
}

//pattern createHostInstance(hostType : HostType){
//	HostType(hostType);
//}
//
//pattern killHostInstance(hostInstance : HostInstance){
//	HostInstance(hostInstance);
//}

pattern cancelRequest(request : Request, cps : CyberPhysicalSystem){
	CyberPhysicalSystem.requests(cps,request);
}

private pattern maxCpuUsage(id, host : HostInstance, app : ApplicationInstance) {
	HostInstance.id(host, id);
	HostInstance.availableCpu(host, cpu);
	ApplicationInstance.allocatedTo(app, host);
	check(cpu < 1);
}

private pattern maxRamUsage(id, host : HostInstance, app : ApplicationInstance) {
	HostInstance.id(host, id);
	HostInstance.availableHdd(host, ram);
	ApplicationInstance.allocatedTo(app, host);
	check(ram < 1);
}

private pattern maxHddUsage(id, host : HostInstance, app : ApplicationInstance) {
	HostInstance.id(host, id);
	HostInstance.availableCpu(host, hdd);
	ApplicationInstance.allocatedTo(app, host);
	check(hdd < 1);
}

pattern maxAnyUsage(id, host : HostInstance, app : ApplicationInstance) {
	find maxCpuUsage(id,host,app);
} or {
	find maxRamUsage(id,host,app);
} or {
	find maxHddUsage(id,host,app);
}